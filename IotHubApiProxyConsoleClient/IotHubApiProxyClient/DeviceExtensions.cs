// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using IotHubApiProxy;
using Microsoft.Rest;

namespace IotHubApiProxy
{
    public static partial class DeviceExtensions
    {
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string DeleteById(this IDevice operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevice)s).DeleteByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> DeleteByIdAsync(this IDevice operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.DeleteByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        public static string Get(this IDevice operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevice)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetAsync(this IDevice operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string GetById(this IDevice operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevice)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetByIdAsync(this IDevice operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string PostById(this IDevice operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevice)s).PostByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IotHubApiProxyClient.IDevice.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostByIdAsync(this IDevice operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
